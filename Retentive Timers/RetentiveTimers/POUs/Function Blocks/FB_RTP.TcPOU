<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_RTP" Id="{d2cb9c23-61d1-4ce8-a8f9-116209596e46}" SpecialFunc="None">
    <Declaration><![CDATA[(* Retentive Pulse Timer - implements a pulse time that persists if PLC cycle is stopped. 
when the input becomes TRUE, the elapsed time ET will run for the set time PT and the output Q will becomes TRUE.  
*)
FUNCTION_BLOCK FB_RTP
VAR_INPUT
        IN      : BOOL; // Trigger for Start of the Signal
        PT      : TIME; // The length of the High-Signal in ms
END_VAR
VAR_OUTPUT
        Q       : BOOL; // The pulse
        ET      : TIME; // The current phase of the High-Signal
END_VAR
VAR
	bMeasure_Cycle_Time : BOOL;
	tStart_Timestamp 	: TIME; 
	arCycle_Time 		: ARRAY[0..1] OF TIME; // 0: Actual cycle time 1: Copy of cycle time
	eState 				: (IDLE, READY, START);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[LBL_TOP: 
CASE eState OF 
	IDLE:
		ET := T#0MS; Q := FALSE;
		IF IN THEN eState := READY; Q := TRUE; JMP LBL_TOP; END_IF

	READY: 
		
		bMeasure_Cycle_Time := Q := TRUE; 
		tStart_Timestamp := TIME();
		eState := START;  
		
	START: 
		IF bMeasure_Cycle_Time THEN 
			arCycle_Time[0] := arCycle_Time[1] := TIME() - tStart_Timestamp;
			bMeasure_Cycle_Time := FALSE; 
			END_IF

		THIS^.Increment(arCycle_Time[0], arCycle_Time[1]); 
		ET := LIMIT(T#0MS, THIS^.Lerp(T#0MS, PT, TO_REAL(arCycle_Time[0])/TO_REAL(PT))-arCycle_Time[1], PT);
		Q := ET < PT;
		IF NOT(Q OR IN) THEN eState := IDLE; END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="Increment" Id="{55d1f2b0-3e68-4c97-985d-b57830ce6cd5}">
      <Declaration><![CDATA[METHOD PRIVATE Increment
VAR_INPUT
	tValue 		: REFERENCE TO TIME; 
	tIncrement 	: TIME;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[tValue := tValue + tIncrement; 
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Lerp" Id="{b0fef7d9-678a-4cd9-a074-11650f082ba9}">
      <Declaration><![CDATA[// Linear interpolation (Lerp) - this method interpolates values between 2 time points.
METHOD PRIVATE Lerp : TIME
VAR_INPUT
	tStart 	: TIME := T#0MS; 
	tFinish : TIME;
	fPercentage : REAL; // Value must be between 0 and 1
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Lerp(Start, Finish, Percentage) = Start + (Finish - Start)*Percentage
Lerp := TO_TIME(TO_REAL(tStart) + TO_REAL(tFinish - tStart)*fPercentage);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_RTP">
      <LineId Id="71" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="64" Count="0" />
      <LineId Id="33" Count="9" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_RTP.Increment">
      <LineId Id="16" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_RTP.Lerp">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>