<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_RTP" Id="{d2cb9c23-61d1-4ce8-a8f9-116209596e46}" SpecialFunc="None">
    <Declaration><![CDATA[(* Retentive Pulse Timer - implements a pulse time that persists if PLC cycle is stopped. 
when the input becomes TRUE, the elapsed time ET will run for the set time PT and the output Q will becomes TRUE.  
*)
FUNCTION_BLOCK FB_RTP
VAR_INPUT
        IN      : BOOL; // Trigger for Start of the Signal
        PT      : TIME; // The length of the High-Signal in ms
END_VAR
VAR_OUTPUT
        Q       : BOOL; // The pulse
        ET      : TIME; // The current phase of the High-Signal
END_VAR
VAR
	stPLC_Task_Info 	: ST_PLC_TASK_INFORMATION;
	tAccumulator 		: TIME;
	nLast_Cycle_Count 	: UDINT;
	eState 				: (IDLE, RUN);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[LBL_TOP:
CASE eState OF
	IDLE:
		tAccumulator := ET := T#0MS; Q := FALSE;
		IF IN THEN eState := RUN; JMP LBL_TOP; END_IF
	RUN:
		Q := ET < PT;
		IF (PT = t#0s) THEN RETURN; END_IF
		IF NOT(Q) AND NOT(IN) THEN eState := IDLE; JMP LBL_TOP; END_IF
		IF NOT(Q) THEN RETURN; END_IF
		stPLC_Task_Info := F_Get_PLC_Task_Information();
		IF (nLast_Cycle_Count = stPLC_Task_Info.CycleCount)THEN RETURN; END_IF
		tAccumulator := tAccumulator + stPLC_Task_Info.tCycleTime; 
		ET := LIMIT(T#0MS, THIS^.Lerp(T#0MS, PT, TO_REAL(tAccumulator)/TO_REAL(PT))-stPLC_Task_Info.tCycleTime, PT);
		nLast_Cycle_Count := stPLC_Task_Info.CycleCount;	
END_CASE]]></ST>
    </Implementation>
    <Method Name="Lerp" Id="{b0fef7d9-678a-4cd9-a074-11650f082ba9}">
      <Declaration><![CDATA[// Linear interpolation (Lerp) - this method interpolates values between 2 time points.
METHOD PRIVATE Lerp : TIME
VAR_INPUT
	tStart 	: TIME := T#0MS; 
	tFinish : TIME;
	fPercentage : REAL; // Value must be between 0 and 1
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Lerp(Start, Finish, Percentage) = Start + (Finish - Start)*Percentage
Lerp := TO_TIME(TO_REAL(tStart) + TO_REAL(tFinish - tStart)*fPercentage);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_RTP">
      <LineId Id="120" Count="0" />
      <LineId Id="101" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="103" Count="1" />
      <LineId Id="132" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="92" Count="0" />
    </LineIds>
    <LineIds Name="FB_RTP.Lerp">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>