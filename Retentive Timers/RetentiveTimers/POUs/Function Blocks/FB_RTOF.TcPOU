<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_RTOF" Id="{87f5daad-7f7e-490d-952a-93e6f5384134}" SpecialFunc="None">
    <Declaration><![CDATA[(* Retentive Timer Off-Delay - implements a timer-off delay that persists if PLC cycle is stopped. 
When the input becomes FALSE after a TRUE, the elapsed time ET will run through until the output Q becomes TRUE. 
*)
FUNCTION_BLOCK FB_RTOF
VAR_INPUT
	IN 	: BOOL; // Starts timer with falling edge, resets timer with rising edge
	PT 	: TIME; // Time to pass, before Q is set
END_VAR
VAR_OUTPUT
	Q 	: BOOL; // is FALSE, PT seconds after IN had a falling edge
	ET 	: TIME; // Elapsed time
END_VAR
VAR
	stPLC_Task_Info 	: ST_PLC_TASK_INFORMATION;
	tAccumulator 		: TIME;
	nLast_Cycle_Count 	: UDINT;
	eState 				: (IDLE, RUN);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[LBL_TOP: 
CASE eState OF
	IDLE: 
		IF IN THEN Q := TRUE; tAccumulator := ET := T#0MS; eState := RUN; JMP LBL_TOP; END_IF
	RUN:
		stPLC_Task_Info := F_Get_PLC_Task_Information();
		IF NOT(IN) AND ((nLast_Cycle_Count <> stPLC_Task_Info.CycleCount) OR nLast_Cycle_Count = 0) THEN 
			Q := ET <> PT;
			IF (ET >= PT) THEN Q := FALSE;  eState := IDLE; JMP LBL_TOP; END_IF
			tAccumulator := tAccumulator + stPLC_Task_Info.tCycleTime; 
			ET := LIMIT(T#0MS, THIS^.Lerp(T#0MS, PT, TO_REAL(tAccumulator)/TO_REAL(PT))-stPLC_Task_Info.tCycleTime, PT);
			END_IF
		nLast_Cycle_Count := stPLC_Task_Info.CycleCount;
		IF IN THEN tAccumulator := ET := T#0MS;END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="Lerp" Id="{36a01201-4a8e-4415-91bf-222a16e52a06}">
      <Declaration><![CDATA[// Linear interpolation (Lerp) - this method interpolates values between 2 time points.
METHOD PRIVATE Lerp : TIME
VAR_INPUT
	tStart 	: TIME := T#0MS; 
	tFinish : TIME;
	fPercentage : REAL; // Value must be between 0 and 1
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Lerp(Start, Finish, Percentage) = Start + (Finish - Start)*Percentage
Lerp := TO_TIME(TO_REAL(tStart) + TO_REAL(tFinish - tStart)*fPercentage);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_RTOF">
      <LineId Id="463" Count="1" />
      <LineId Id="468" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="490" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="487" Count="1" />
      <LineId Id="475" Count="2" />
      <LineId Id="482" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="467" Count="0" />
    </LineIds>
    <LineIds Name="FB_RTOF.Lerp">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>