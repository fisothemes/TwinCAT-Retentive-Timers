<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="P_Example_1_TONs" Id="{2b73a315-0cad-48a2-8df4-ccb0dc96d414}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Example_1_TONs
VAR
	bStart 				: BOOL; 
	tSet_Time 			: TIME := T#10M; 
	tElapsed_Time_TON, 
	tElapsed_Time_RTON 	: TIME; 
	bElapsed_Time_TON,
	bElapsed_Time_RTON 	: BOOL; 
	
	fbTON 				: TON;
//	fbRTON 				: FB_RTON;
	stPLC_Task_Info : ST_PLC_TASK_INFORMATION;
	nCC, nRCC 	: UDINT;
	
	i_Input		    	: I_Input;
	fbRTON				: Timer(E_timer_type.RTON);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
NOTES:
	-> Activate Configuration and START(F5) PLC Boot Project
	-> Login (if you haven't already)
	-> Make sure both timers are set for 10 mins 
	-> Start the timers by writing a TRUE to the bStart variable
	-> Let the timers run for a little bit
	-> Notice that both elapsed time read are the same
	-> STOP(Shift+F5) the PLC Boot Project for approx. 10-30secs
	-> START(F5) the PLC Boot Project
	
	--> Notice the TON elapsed time (tElapsed_Time_TON) is 10-30secs ahead of the FB_RTON elapsed time (tElapsed_Time_RTON)
	--> FB_RTON resumes from where it left-off if PLC is stopped. 
*)

fbTON(IN := bStart, PT := tSet_Time, 
	  Q => bElapsed_Time_TON, ET => tElapsed_Time_TON);
	  
//fbRTON(IN := bStart, PT := tSet_Time, 
//	  Q => bElapsed_Time_RTON, ET => tElapsed_Time_RTON);

fbRTON.tPreSet(tSet_Time);             	// use of Method.	  
i_Input := fbRTON ; 	// use of Polymorphism.
i_Input.Start(bStart);
bElapsed_Time_RTON := fbRTON.Output.bDone;
tElapsed_Time_RTON := fbRTON.Output.tElapsed;
fbRTON();]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>