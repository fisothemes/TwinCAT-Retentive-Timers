<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_RStopwatch" Id="{cb064996-3846-4c3e-bc12-6d755fa1ab49}" SpecialFunc="None">
    <Declaration><![CDATA[// Retentive stopwatch
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK INTERNAL FB_RStopwatch EXTENDS Timer_Abstract
//VAR_INPUT
//	bStart 			: BOOL;
//END_VAR
//VAR_OUTPUT
//	tElapsed 		: TIME;
//END_VAR
VAR
	stPLC_Task_Info : ST_PLC_TASK_INFORMATION;
	tAccumulator 	: TIME;
	fbTON 			: FB_RTON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Cyclic" Id="{d3cfce7d-da6a-45c2-9830-6399bebe471a}">
      <Declaration><![CDATA[
METHOD Cyclic
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF SUPER^._Input.bStart THEN stPLC_Task_Info := F_Get_PLC_Task_Information(); END_IF

//fbTON(tPreSet := stPLC_Task_Info.tCycleTime*2 + tAccumulator);
//fbTON(bStart := SUPER^._Input.bStart AND NOT(fbTON.output.bDone));
fbTON._Setting.tPreSet := stPLC_Task_Info.tCycleTime*2 + tAccumulator;
fbTON._Input.bStart := SUPER^._Input.bStart AND NOT(fbTON.output.bDone);
fbTON.Cyclic();

tAccumulator := fbTON.Output.tElapsed; 

IF SUPER^._Input.bStart THEN Output.tElapsed := tAccumulator; END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>